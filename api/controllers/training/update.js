'use strict';
/** @function
  @name update - Update training
  @memberof module:Training
  @desc Route - {@linkcode PUT:/training/:id}  -> If u want to join to training send: trining id with client token.
  Then client will be add to training only if he hasn't previously registered for training.
  Same logic for signed out from training.
  Route - {@linkcode PUT:/training/:id/all} for canceling all trainings with gid which have training with this id. Only for client
  @param {Number} id
  @param {Object} data
  @param {String} [data.cardToken] - Credit card token generated by stripe plugin. Only if user try to join non-free event
  @param {file} [image]
  @param {String} [place]
  @returns Ok - status 200 with trining data
  @returns [Bad request]{@link Bad_request}
  @returns [Forbidden]{@link Forbidden} Group trainings must have min 4 capacity
  @returns [Server error]{@link Server_error}
*/
module.exports = function update (req, res) {
  const data = req.body;
  data.id = req.param("id");
  data.userID = req.token.userID;
  const cardToken = data.cardToken;

  delete data.buildingId;
  delete data.price;

  if(req.permission === 4) {
    if(req.path.includes('/all')) {
      TrainingService.cancelAllFollowing(data.id, req.token.userID)
        .then(res.ok)
        .catch(res.error);
    } else {
      TrainingService.updateByClient(data.id, req.token.userID, cardToken)
        .then(res.ok)
        .catch(res.error);
    }
  } else {
    if(req.path.includes('/all') && req.permission <= 1) {
      if(isNaN(data.id)) return res.error({ errCode: 400, message: 'ID should be a number' });
      if(!data.trainerId || isNaN(data.trainerId)) return res.error({ errCode: 400, message: 'TrainerId should be a number' });

      TrainingService.updateRepeatTrainer(data.id, data.trainerId)
        .then(res.ok)
        .catch(res.error);
    } else {
      Utilities.prepareData(data, req.permission, 'Training')
        .then(data => {
          ValidService.valid(data, 'Training', true)
            .then(() => {
              TrainingService.update(data.id, data, req)
                .then(res.ok)
                .catch(res.error);
            })
            .catch(res.error);
        })
        .catch(res.error);
    }
  }
};
